@page "/chat"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>

@if (String.IsNullOrEmpty(userInput))
{
    <div class="form-group">
        <label>
            User: <input @bind="userInput" />
        </label>
    </div>
}

<MessageInput IsConnected="hubConnection?.State == HubConnectionState.Connected" OnUpdate="HandleUpdate" />

<hr>

<ul id="messagesList">

        @foreach (var message in messages)
        {
            <li>
                <DisplayMessageComponent chatMessage="message" userName="userInput" />
            </li>
        }

</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    public required string userInput { get; set; }
    public required string messageInput;

    private async void HandleUpdate(string newValue)
    {
        messageInput = newValue;
        await Send();

    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null && !String.IsNullOrEmpty(messageInput))
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
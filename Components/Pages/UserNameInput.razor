@using System.ComponentModel.DataAnnotations

@if (isError) {
    <div class="alert alert-danger">Please enter your Username.</div>
}

<div class="flex">
    <span
        class="inline-flex items-center px-3 text-sm text-gray-900 bg-gray-200 border rounded-e-0 border-gray-300 border-e-0 rounded-s-md dark:bg-gray-600 dark:text-gray-400 dark:border-gray-600">
        <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
            fill="currentColor" viewBox="0 0 20 20">
            <path
                d="M10 0a10 10 0 1 0 10 10A10.011 10.011 0 0 0 10 0Zm0 5a3 3 0 1 1 0 6 3 3 0 0 1 0-6Zm0 13a8.949 8.949 0 0 1-4.951-1.488A3.987 3.987 0 0 1 9 13h2a3.987 3.987 0 0 1 3.951 3.512A8.949 8.949 0 0 1 10 18Z" />
        </svg>
    </span>
    <input @ref="startName" type="text" id="website-admin"
        class="rounded-none rounded-e-lg bg-gray-50 border text-gray-900 focus:ring-blue-500 focus:border-blue-500 block flex-1 min-w-0 w-full text-sm border-gray-300 p-2.5  dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
        placeholder="Username..." @bind=@SetUserName><div class="ml-4">
        <button @onclick="SetUserNameAsync"
            class="flex items-center justify-center bg-indigo-500 hover:bg-indigo-600 rounded-xl text-white px-4 py-1 flex-shrink-0">
            <span>Send</span>
            <span class="ml-2">
                <svg class="w-4 h-4 transform rotate-45 -mt-px" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                </svg>
            </span>
        </button>
    </div>
</div>

@code {
    private bool isError = false;
    private ElementReference startName;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await startName.FocusAsync();
        }
    }

    [Parameter]
    public EventCallback<string> OnUserNameSet { get; set; }

    public required string SetUserName { get; set; }

    private async Task SetUserNameAsync()
    {
        if(String.IsNullOrWhiteSpace(SetUserName)) {
            await startName.FocusAsync();
            isError = true;
            return;
        }
        
        await OnUserNameSet.InvokeAsync(SetUserName.Trim());
    }
}